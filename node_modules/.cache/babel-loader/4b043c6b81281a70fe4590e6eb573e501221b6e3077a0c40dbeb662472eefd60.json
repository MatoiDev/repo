{"ast":null,"code":"function t() {\n  return t = Object.assign ? Object.assign.bind() : function (t) {\n    for (var s = 1; s < arguments.length; s++) {\n      var e = arguments[s];\n      for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n    }\n    return t;\n  }, t.apply(this, arguments);\n}\nvar s = {\n    strings: [\"These are the default values...\", \"You know what you should do?\", \"Use your own!\", \"Have a great day!\"],\n    stringsElement: null,\n    typeSpeed: 0,\n    startDelay: 0,\n    backSpeed: 0,\n    smartBackspace: !0,\n    shuffle: !1,\n    backDelay: 700,\n    fadeOut: !1,\n    fadeOutClass: \"typed-fade-out\",\n    fadeOutDelay: 500,\n    loop: !1,\n    loopCount: Infinity,\n    showCursor: !0,\n    cursorChar: \"|\",\n    autoInsertCss: !0,\n    attr: null,\n    bindInputFocusEvents: !1,\n    contentType: \"html\",\n    onBegin: function onBegin(t) {},\n    onComplete: function onComplete(t) {},\n    preStringTyped: function preStringTyped(t, s) {},\n    onStringTyped: function onStringTyped(t, s) {},\n    onLastStringBackspaced: function onLastStringBackspaced(t) {},\n    onTypingPaused: function onTypingPaused(t, s) {},\n    onTypingResumed: function onTypingResumed(t, s) {},\n    onReset: function onReset(t) {},\n    onStop: function onStop(t, s) {},\n    onStart: function onStart(t, s) {},\n    onDestroy: function onDestroy(t) {}\n  },\n  e = new ( /*#__PURE__*/function () {\n    function e() {}\n    var n = e.prototype;\n    return n.load = function (e, n, i) {\n      if (e.el = \"string\" == typeof i ? document.querySelector(i) : i, e.options = t({}, s, n), e.isInput = \"input\" === e.el.tagName.toLowerCase(), e.attr = e.options.attr, e.bindInputFocusEvents = e.options.bindInputFocusEvents, e.showCursor = !e.isInput && e.options.showCursor, e.cursorChar = e.options.cursorChar, e.cursorBlinking = !0, e.elContent = e.attr ? e.el.getAttribute(e.attr) : e.el.textContent, e.contentType = e.options.contentType, e.typeSpeed = e.options.typeSpeed, e.startDelay = e.options.startDelay, e.backSpeed = e.options.backSpeed, e.smartBackspace = e.options.smartBackspace, e.backDelay = e.options.backDelay, e.fadeOut = e.options.fadeOut, e.fadeOutClass = e.options.fadeOutClass, e.fadeOutDelay = e.options.fadeOutDelay, e.isPaused = !1, e.strings = e.options.strings.map(function (t) {\n        return t.trim();\n      }), e.stringsElement = \"string\" == typeof e.options.stringsElement ? document.querySelector(e.options.stringsElement) : e.options.stringsElement, e.stringsElement) {\n        e.strings = [], e.stringsElement.style.cssText = \"clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;\";\n        var r = Array.prototype.slice.apply(e.stringsElement.children),\n          o = r.length;\n        if (o) for (var a = 0; a < o; a += 1) e.strings.push(r[a].innerHTML.trim());\n      }\n      for (var u in e.strPos = 0, e.currentElContent = this.getCurrentElContent(e), e.currentElContent && e.currentElContent.length > 0 && (e.strPos = e.currentElContent.length - 1, e.strings.unshift(e.currentElContent)), e.sequence = [], e.strings) e.sequence[u] = u;\n      e.arrayPos = 0, e.stopNum = 0, e.loop = e.options.loop, e.loopCount = e.options.loopCount, e.curLoop = 0, e.shuffle = e.options.shuffle, e.pause = {\n        status: !1,\n        typewrite: !0,\n        curString: \"\",\n        curStrPos: 0\n      }, e.typingComplete = !1, e.autoInsertCss = e.options.autoInsertCss, e.autoInsertCss && (this.appendCursorAnimationCss(e), this.appendFadeOutAnimationCss(e));\n    }, n.getCurrentElContent = function (t) {\n      return t.attr ? t.el.getAttribute(t.attr) : t.isInput ? t.el.value : \"html\" === t.contentType ? t.el.innerHTML : t.el.textContent;\n    }, n.appendCursorAnimationCss = function (t) {\n      var s = \"data-typed-js-cursor-css\";\n      if (t.showCursor && !document.querySelector(\"[\" + s + \"]\")) {\n        var e = document.createElement(\"style\");\n        e.setAttribute(s, \"true\"), e.innerHTML = \"\\n        .typed-cursor{\\n          opacity: 1;\\n        }\\n        .typed-cursor.typed-cursor--blink{\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      \", document.body.appendChild(e);\n      }\n    }, n.appendFadeOutAnimationCss = function (t) {\n      var s = \"data-typed-fadeout-js-css\";\n      if (t.fadeOut && !document.querySelector(\"[\" + s + \"]\")) {\n        var e = document.createElement(\"style\");\n        e.setAttribute(s, \"true\"), e.innerHTML = \"\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n        }\\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\\n          -webkit-animation: 0;\\n          animation: 0;\\n        }\\n      \", document.body.appendChild(e);\n      }\n    }, e;\n  }())(),\n  n = new ( /*#__PURE__*/function () {\n    function t() {}\n    var s = t.prototype;\n    return s.typeHtmlChars = function (t, s, e) {\n      if (\"html\" !== e.contentType) return s;\n      var n = t.substring(s).charAt(0);\n      if (\"<\" === n || \"&\" === n) {\n        var i;\n        for (i = \"<\" === n ? \">\" : \";\"; t.substring(s + 1).charAt(0) !== i && !(1 + ++s > t.length););\n        s++;\n      }\n      return s;\n    }, s.backSpaceHtmlChars = function (t, s, e) {\n      if (\"html\" !== e.contentType) return s;\n      var n = t.substring(s).charAt(0);\n      if (\">\" === n || \";\" === n) {\n        var i;\n        for (i = \">\" === n ? \"<\" : \"&\"; t.substring(s - 1).charAt(0) !== i && !(--s < 0););\n        s--;\n      }\n      return s;\n    }, t;\n  }())(),\n  i = /*#__PURE__*/function () {\n    function t(t, s) {\n      e.load(this, s, t), this.begin();\n    }\n    var s = t.prototype;\n    return s.toggle = function () {\n      this.pause.status ? this.start() : this.stop();\n    }, s.stop = function () {\n      this.typingComplete || this.pause.status || (this.toggleBlinking(!0), this.pause.status = !0, this.options.onStop(this.arrayPos, this));\n    }, s.start = function () {\n      this.typingComplete || this.pause.status && (this.pause.status = !1, this.pause.typewrite ? this.typewrite(this.pause.curString, this.pause.curStrPos) : this.backspace(this.pause.curString, this.pause.curStrPos), this.options.onStart(this.arrayPos, this));\n    }, s.destroy = function () {\n      this.reset(!1), this.options.onDestroy(this);\n    }, s.reset = function (t) {\n      void 0 === t && (t = !0), clearInterval(this.timeout), this.replaceText(\"\"), this.cursor && this.cursor.parentNode && (this.cursor.parentNode.removeChild(this.cursor), this.cursor = null), this.strPos = 0, this.arrayPos = 0, this.curLoop = 0, t && (this.insertCursor(), this.options.onReset(this), this.begin());\n    }, s.begin = function () {\n      var t = this;\n      this.options.onBegin(this), this.typingComplete = !1, this.shuffleStringsIfNeeded(this), this.insertCursor(), this.bindInputFocusEvents && this.bindFocusEvents(), this.timeout = setTimeout(function () {\n        0 === t.strPos ? t.typewrite(t.strings[t.sequence[t.arrayPos]], t.strPos) : t.backspace(t.strings[t.sequence[t.arrayPos]], t.strPos);\n      }, this.startDelay);\n    }, s.typewrite = function (t, s) {\n      var e = this;\n      this.fadeOut && this.el.classList.contains(this.fadeOutClass) && (this.el.classList.remove(this.fadeOutClass), this.cursor && this.cursor.classList.remove(this.fadeOutClass));\n      var i = this.humanizer(this.typeSpeed),\n        r = 1;\n      !0 !== this.pause.status ? this.timeout = setTimeout(function () {\n        s = n.typeHtmlChars(t, s, e);\n        var i = 0,\n          o = t.substring(s);\n        if (\"^\" === o.charAt(0) && /^\\^\\d+/.test(o)) {\n          var a = 1;\n          a += (o = /\\d+/.exec(o)[0]).length, i = parseInt(o), e.temporaryPause = !0, e.options.onTypingPaused(e.arrayPos, e), t = t.substring(0, s) + t.substring(s + a), e.toggleBlinking(!0);\n        }\n        if (\"`\" === o.charAt(0)) {\n          for (; \"`\" !== t.substring(s + r).charAt(0) && (r++, !(s + r > t.length)););\n          var u = t.substring(0, s),\n            p = t.substring(u.length + 1, s + r),\n            c = t.substring(s + r + 1);\n          t = u + p + c, r--;\n        }\n        e.timeout = setTimeout(function () {\n          e.toggleBlinking(!1), s >= t.length ? e.doneTyping(t, s) : e.keepTyping(t, s, r), e.temporaryPause && (e.temporaryPause = !1, e.options.onTypingResumed(e.arrayPos, e));\n        }, i);\n      }, i) : this.setPauseStatus(t, s, !0);\n    }, s.keepTyping = function (t, s, e) {\n      0 === s && (this.toggleBlinking(!1), this.options.preStringTyped(this.arrayPos, this));\n      var n = t.substring(0, s += e);\n      this.replaceText(n), this.typewrite(t, s);\n    }, s.doneTyping = function (t, s) {\n      var e = this;\n      this.options.onStringTyped(this.arrayPos, this), this.toggleBlinking(!0), this.arrayPos === this.strings.length - 1 && (this.complete(), !1 === this.loop || this.curLoop === this.loopCount) || (this.timeout = setTimeout(function () {\n        e.backspace(t, s);\n      }, this.backDelay));\n    }, s.backspace = function (t, s) {\n      var e = this;\n      if (!0 !== this.pause.status) {\n        if (this.fadeOut) return this.initFadeOut();\n        this.toggleBlinking(!1);\n        var i = this.humanizer(this.backSpeed);\n        this.timeout = setTimeout(function () {\n          s = n.backSpaceHtmlChars(t, s, e);\n          var i = t.substring(0, s);\n          if (e.replaceText(i), e.smartBackspace) {\n            var r = e.strings[e.arrayPos + 1];\n            e.stopNum = r && i === r.substring(0, s) ? s : 0;\n          }\n          s > e.stopNum ? (s--, e.backspace(t, s)) : s <= e.stopNum && (e.arrayPos++, e.arrayPos === e.strings.length ? (e.arrayPos = 0, e.options.onLastStringBackspaced(), e.shuffleStringsIfNeeded(), e.begin()) : e.typewrite(e.strings[e.sequence[e.arrayPos]], s));\n        }, i);\n      } else this.setPauseStatus(t, s, !1);\n    }, s.complete = function () {\n      this.options.onComplete(this), this.loop ? this.curLoop++ : this.typingComplete = !0;\n    }, s.setPauseStatus = function (t, s, e) {\n      this.pause.typewrite = e, this.pause.curString = t, this.pause.curStrPos = s;\n    }, s.toggleBlinking = function (t) {\n      this.cursor && (this.pause.status || this.cursorBlinking !== t && (this.cursorBlinking = t, t ? this.cursor.classList.add(\"typed-cursor--blink\") : this.cursor.classList.remove(\"typed-cursor--blink\")));\n    }, s.humanizer = function (t) {\n      return Math.round(Math.random() * t / 2) + t;\n    }, s.shuffleStringsIfNeeded = function () {\n      this.shuffle && (this.sequence = this.sequence.sort(function () {\n        return Math.random() - .5;\n      }));\n    }, s.initFadeOut = function () {\n      var t = this;\n      return this.el.className += \" \" + this.fadeOutClass, this.cursor && (this.cursor.className += \" \" + this.fadeOutClass), setTimeout(function () {\n        t.arrayPos++, t.replaceText(\"\"), t.strings.length > t.arrayPos ? t.typewrite(t.strings[t.sequence[t.arrayPos]], 0) : (t.typewrite(t.strings[0], 0), t.arrayPos = 0);\n      }, this.fadeOutDelay);\n    }, s.replaceText = function (t) {\n      this.attr ? this.el.setAttribute(this.attr, t) : this.isInput ? this.el.value = t : \"html\" === this.contentType ? this.el.innerHTML = t : this.el.textContent = t;\n    }, s.bindFocusEvents = function () {\n      var t = this;\n      this.isInput && (this.el.addEventListener(\"focus\", function (s) {\n        t.stop();\n      }), this.el.addEventListener(\"blur\", function (s) {\n        t.el.value && 0 !== t.el.value.length || t.start();\n      }));\n    }, s.insertCursor = function () {\n      this.showCursor && (this.cursor || (this.cursor = document.createElement(\"span\"), this.cursor.className = \"typed-cursor\", this.cursor.setAttribute(\"aria-hidden\", !0), this.cursor.innerHTML = this.cursorChar, this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling)));\n    }, t;\n  }();\nexport { i as default };","map":{"version":3,"names":["s","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","t","onComplete","preStringTyped","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","e","n","prototype","load","i","el","document","querySelector","options","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","trim","style","cssText","r","Array","slice","apply","children","o","length","a","push","innerHTML","u","strPos","currentElContent","getCurrentElContent","unshift","sequence","arrayPos","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","createElement","setAttribute","body","appendChild","typeHtmlChars","substring","charAt","backSpaceHtmlChars","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanizer","test","exec","parseInt","temporaryPause","p","c","doneTyping","keepTyping","setPauseStatus","complete","initFadeOut","add","Math","round","random","sort","className","addEventListener","insertBefore","nextSibling","default"],"sources":["/Users/worm/Desktop/repo/node_modules/typed.js/src/defaults.js","/Users/worm/Desktop/repo/node_modules/typed.js/src/initializer.js","/Users/worm/Desktop/repo/node_modules/typed.js/src/html-parser.js","/Users/worm/Desktop/repo/node_modules/typed.js/src/typed.js"],"sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}